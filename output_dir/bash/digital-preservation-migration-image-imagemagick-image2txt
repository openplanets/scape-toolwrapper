#!/bin/bash

################################################################################
#                  Copyright 2012 The SCAPE Project Consortium
#
#   This software is copyrighted by the SCAPE Project Consortium. 
#   The SCAPE project is co-funded by the European Union under
#   FP7 ICT-2009.4.1 (Grant Agreement number 270137).
#
#   Licensed under the Apache License, Version 2.0 (the "License");
#   you may not use this file except in compliance with the License.
#   You may obtain a copy of the License at
#
#                   http://www.apache.org/licenses/LICENSE-2.0              
#
#   Unless required by applicable law or agreed to in writing, software
#   distributed under the License is distributed on an "AS IS" BASIS,
#   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.   
#   See the License for the specific language governing permissions and
#   limitations under the License.
################################################################################

#################
#   WARNINGS    #
#################
#1# piping to SDTOUT may cause problems when dealing with containers that have special characteristics (like initial or ending file markers)

#################
#   functions   #
#################
show_help(){
	echo -e "* This software is copyrighted by the SCAPE Project Consortium.\n* The SCAPE project is co-funded by the European Union under FP7 ICT-2009.4.1 (Grant Agreement number 270137)."
	echo -e "Converts any ImageMagick supported image format to Text\nFor more information about the tool \"ImageMagick\" see: http://www.imagemagick.org/script/convert.php"
	echo
	echo "Usage: $0 -i input|STDIN [-p params] -o output|STDOUT"
	echo -e "Where:\n\t-i input|STDIN > Reference to input file OR Read input from the STDIN\n\t-p params > Additional conversion parameters\n\t-o output|STDOUT > Reference to output file OR Write output to the STDOUT"
	exit 1
}

parse_arguments(){
	if [ $# -eq 0 ]; then
		show_help
	fi
	i=0
	o=0
	p=0
	stdin=0
	stdout=0
	while [ "$1" != "" ];
	do
		case $1 in
			-h) 	show_help
			;;
	
			-i)
				shift
				input=1
				output=0
				param=0
				i=$(($i+1))
			;;
	
			-p)
				shift
				param=1
				input=0
				output=0
				p=$(($p+1))
			;;
	
			-o)
				shift
				output=1
				input=0
				param=0
				o=$(($o+1))
			;;
		
			*)
				if [ "$input" == "1" ]; then
					if [ $i -eq 1 ]; then
						input_files1+=("$1")
					fi
					if [ "$1" == "STDIN" ]; then                
						stdin=1
					fi
				fi
					if [ $p -eq 1 ]; then
						param_files1+=("$1")
					fi
				if [ "$output" == "1" ]; then
					if [ $o -eq 1 ]; then
						output_files1+=("$1")
					fi
					if [ "$1" == "STDOUT" ]; then                
						stdout=1
					fi
				fi
				shift
		esac
	done
}

execute_command(){
	/usr/bin/convert "${input_files1[@]}" txt:"${output_files1[@]}"
	return $?
}

verify_stdin(){
   tmp_input=$(mktemp)
   if [ $stdin -eq 1 ]; then
      dd of=$tmp_input >/dev/null 2>/dev/null
      input_files1=()
      input_files1+=("$tmp_input")
   fi
}

verify_stdout(){
   tmp_output=$(mktemp)
   if [ $stdout -eq 1 ]; then
      output_files1=()
      output_files1+=("$tmp_output")
   fi
}

verify_stdout_2(){
   if [ $stdout -eq 1 ]; then
      dd if=${output_files1[0]} 2>/dev/null
   fi
}

delete_tmp_files(){
   if [ $stdin -eq 1 ]; then
      rm $tmp_input
   fi
   if [ $stdout -eq 1 ]; then
      rm $tmp_output
   fi
}

verify_required_arguments(){
	if [ -z "${input_files1[@]}" ]; then
		show_help
	fi
	if [ -z "${output_files1[@]}" ]; then
		show_help
	fi
}


#################
#   real deal   #
#################
parse_arguments "$@"

verify_required_arguments

verify_stdin

verify_stdout

execute_command
command_execution_exit_code=$?

verify_stdout_2

delete_tmp_files

exit $command_execution_exit_code
